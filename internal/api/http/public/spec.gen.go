// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RX32/bNhD+Vwhuj7ItO16W6s1bjMBAhxmJ+7IiiGnpZLOTSJWksnqG//fhSFmyIvlX",
	"l3Yt9iTBPt7d993dd9SGhjLNpABhNA02VIcrSJl9HT/vfoxAh4pnhktBA3oPmQINwhAmCKAR9Sh8YmmW",
	"AFqzJHmK2JoGMUs0eBRERAM68AfDjj/s9K9m/pvgyg98/w88h+efOFoM+9fx1c11vxPG/Z86w0G86LBB",
	"/KYz8P0BXIc/D4ZXN9SjiQxZkUn56lFtmDIvwtxUYQw3mBz9bV1kvPVopmQGynDQtaw31KwztF1ImQAT",
	"aGohbGgsVcowSsQMdAxPAV07a20UF0trXELaO5HnPGozrtBsmn8WoM4NXIBsOKr+ovdSGjJbZ0BiqUhR",
	"4dKVXHyA0HIzk7cSPdU5qvVBS75RDk+Y4b9P2aNGRvI8ErceVfAx5woiGrwvXHq1ZB8PQJyILDeviPPC",
	"qjTTPprolJlwdTJbad9YQgOjcvAuy/7k4RLNCcttAwj+xEUsm4Iymk5sO6ZMsCUXS4KICTeQYm8mPASh",
	"bUzBUvQ4yli4ApsNW2oavH/pcCYjSRRomasQURXnsKXo9rGaBhtnNJ1Qjz6D0u5wv+uja5mBYBmnAb3q",
	"+l2fejRjZmUJ78EBZZytgNyPH2YERJRJLkwPz5BcQ0SMJAnXqJkRCRUwA+RvUJIgbqmAzN0wzgkIw7G0",
	"XUJmK66JdRFKYRgXmjAyvxvP5tbNfPr7w2xOsBeshmCMDBTWlJgVNOIZpv/UHhKTQWj4MyTrLvXoEkwT",
	"yh0YDGZdyJiwJGnJ0DZMEXyCEv6Wa1OKCsaRQrsmHfg+PhAHyi8KbpYl3Ilf74N2veu2D7656gcb+qOC",
	"mAb0h161p3rFkuoVoapeY0qxtWu1OpyHPAxB6zhPyC4t0iEKTK6QVEHsSUTaghLd6TxNmVoXGMkoSQiU",
	"0TOpWyj81bKOLAr4i3ChDRMhWDbLKE0K3alxsVZRIUCbX2S0voi+c1hrsjSymZYMGEkWUDRP1KX7eoUz",
	"v22UuN8koYX4l4Q6xISRqpzVn9P9AbICAVVvy7goQhcPFWPZ27jnJNq6dBJwWldP7Nb+bmsPn7g2qDuH",
	"q+Ksq6rUYA8/C7ZzWYN9kZoswXgkz1C4PTvlDinRXCwTKPtN24YTFbZWWbGi4pH59B0+rLjcjt+OZ+M9",
	"edFl6H2ROZTGxWKDziIwjCcu5ZdATg3OHZgD9fG/wuicEJgdmCr9ejPcgal1QsYUS8GAaltvI5IL/jEH",
	"wiMUqZiDsvuzzg5HU6xytQB3g9EYZW8P/8tF/ujR4pJUz+Kdrfm5A+Ss/xtZc7GjStjwGoL3Hi7FObI2",
	"+Kz5dlEvkLWyScZ7moZ3FptGMTiNnh8lyczafI2Faz8Lzli3o1Kf965ydXruwSgOz2CvFrULX3Gpc9e1",
	"x7312rYoEfsXaqjqA2Fbv6wfWX6vFriNVVwIxTauGDu0THGTV0YNVsve6m3w0ViWbeuv4PqoNk1useqo",
	"5RgXu3tX6HZJcsGPCtKpz7/HWilEniT1Pkvlc5HNYk0mt20ddmi4vgvEr7vijjXfoabD7XWc4Gz36Vqn",
	"2H7Rfsskf0FVcV/zZ0mL/01Ii024tu6P6Et5aWi7BvxPK/49FfshX2jDTY675LyKb7fbfwIAAP//gIT3",
	"Ik0WAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
