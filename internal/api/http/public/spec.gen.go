// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9SVQW/bPAyG/4rA7zsaTbrdfMsWoPCt2LJTERSsxSQqbEmT6G5B4P8+SHKbOHaRZtjQ",
	"7GTHkUi+D/lKOyhNbY0mzR7yHfhyQzXG14WZm/C0zlhyrCh+leRLpywro8NP3lqCHDw7pdfQZiAbupfI",
	"FP5cGVcjQw7xQzZczIorGg3DRpp7JXtRmkZJyMDE5FhBvsLK0yBsm4Gj741yJCG/63IsX5aZh0cqOeQI",
	"AgttG34nlecXeotcbk5WuwfErqHsvOpPbn5Rc2JlOxASPim9MoOSYXZbiJVxokaNa6XXIigWiqn2kEGl",
	"StI+5tRYh4gzi+WGYjW49pDfHQdcGGmEI28aVwZV3b4wVdAuX0REsmJ2W0AGT+R82nx9NQ2hjSWNVkEO",
	"H6+mV1PIwCJvIvBJCBTf1sSJBTkMuQsJOdwQz6pqEdeEHntrtE+t+jCdhkdpNJOOW9HaSpVx8+TRpw4m",
	"F4a3xCDfwf+OVpDDf5O9XyedWSfRqXve6BxuE+4jzKJSnoVZHfINy3xT1+i2kMMXYqfoiQRWVb8LHenE",
	"cNlmYI0f0f7ZETIF7ZDGmzx/MnJ7lupTYpNr276DwhS2A9zXfzTxGNXFhkQZVcs9sSOsiYpAoenHwaIB",
	"1TbrZmuyC49CtsksFTENWc/j9461RYc1MbkxPxTz0HXeUMwr2IjnRkPwJORxtvtGKSQc480OUB0fy8f2",
	"X/ZaoZuq6s9ZbZ66ah62opiPTdhr5vonFJ/v9d8dvteG7ob4BGD7fJ/0Ecdr5pIh/8VTJV2xbzpaphdx",
	"tMSCBWpBP5Xn3uU52vJmxFPfrMTLPkje/R65jGZ/bR48K27CXfK2jrdt+ysAAP//Q5t3o+QLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
