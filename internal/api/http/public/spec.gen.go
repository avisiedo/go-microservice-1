// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9SVz24bIRDGXwVNe1zFTnvbm1tL0d6i1j1FVjRZxjYRCxRm01rWvnsFOH/W3tR2laru",
	"aVnEAPP75mM2UNvGWUOGA5QbCPWKGkzDmZ3a+HXeOvKsKM1KCrVXjpU18demEWooF6gDFcBrR1BCYK/M",
	"EroCZEu3Epni6oX1DTKUkCYGFrNiTcfty1baWyV727atklAcDO4K8PS9VZ4klDfbQ4teavOnIHt3TzXH",
	"EyOQyriWD1J5IwjHXPu3F71GrlcnaMi+PVXCg8EDkg6u7PYSiVPKLOzelWFyXYmF9aJBg0tlliJmLBRT",
	"E6AArWoyIZ1psIk7ThzWK0q3wWWA8mZ3w5mVVngKtvV1zGobF2sMuvlTEomsmFxXUMAD+ZCDLy/GcWvr",
	"yKBTUMLHi/HFGApwyKsEfBQ3SqMlcWZBHuPZlYQSrognWs/SmqhxcNaELNWH8Th+amuYTApF57SqU/Do",
	"PmQFs2vjKDMoN/De0wJKeDd69vdoa+5RcvYzb/Qe1xn3DmahVWBhFy/5xmWhbRr0ayjhC7FX9EACte6r",
	"sCWdGc67ApwNA7l/9oRMMXfI5U2BP1m5PinrQ8lm13Z9B8Uq7PZwX77pwUNUZysSdcpaPhPbwZqpCBSG",
	"frxYtEe1K7a1NdrETyW7bBZNTPusp2l+y9qhx4aY/JAfqmlUnVeUzhVsxaPQED0JZartvlEqCbt4ixeo",
	"dh/pXfvPe1KYVut+nTX2YXubu7WopkMV9pq5/ouMT/f6nxbfa0V3RXwAsHvsJ33Eqc2cM+S/+KrkFnvU",
	"0zI+i6clXVigEfRTBe41z0HJ2wFPfXMSz/sh+ed95DzE/treBVbcxl5ynOJd1/0KAAD//1ZNZqoUDAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
