// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXb2/bthP+KgR/v5eyLTtel+qduxiBgQ4zEvfNiiCmpZPNTiJVksrqGf7uw5GyZEXy",
	"vzTdWuyVBIm8u+e5u+fIDQ1lmkkBwmgabKgOV5Ay+zp+2n2MQIeKZ4ZLQQN6B5kCDcIQwBVEgZa5CkFT",
	"j8IXlmYJ4CaWJI8RW9MgZokGj4KIaEAH/mDY8Yed/tXMfxtc+YHv/4770NIjxxXD/pv46vpNvxPG/Z86",
	"w0G86LBB/LYz8P0BvAl/HgyvrqlHExmyIqDy1aPaMGWeubmu3BhuMDj669rFTrcezZTMQBkOuhb1hpp1",
	"hmsXUibABC61EDY0lipl6CViBjqGp4Cm3WptFBdLu7iEtGn+rKJv+VmAONdRAaphqPpF76Q0ZLbOgMRS",
	"kSKxpSm5+ASh5WImbyRaqnNSS39LvFEOjxjh14fsUSMjWZBWmspzHjWtbD2q4HPOFUQ0+FiY9GrBPhyA",
	"OBFZbl4R54VZaYZ9NNApM+HqZLTSvrGEBkbl4F0W/cnNJZoTK7cNIPiJi1g2dWQ0ndhyTJlgSy6WBBET",
	"biDF2kx4CEJbn4KlaHGUsXAFNhq21DT4+NzgTEayVCPq7fZhSdHtQ9UN1s9oOqEefQKl3eZ+10fTMgPB",
	"Mk4DetX1uz71aMbMyhLegwOCOFsBuRvfzwiIKJNcmB7uIbmGiBhJEq4NYSIioQJmgPwFShLELRWQuWvG",
	"OQFhOKa2S8hsxTWxJkIpDONCE0bmt+PZ3JqZT3+7n80J1oLVEPSRgcKcErOChj/D9B/aQ2IyCA1/gmTd",
	"pR5dgmlCuQWDzqwJGROWJC0R2oIpnE8it6vUFHQjhXY1OvB9fCAMVFvU1yxLuNO+3iftStfNHHxzyQ82",
	"9P8KYhrQ//Wq6dQrRlOvcFWVGlOKrV2l1dHc52EIWsd5QnZhkQ5RYHKFnApidyLQFpBoTudpytSaBvQ9",
	"MjJKEgKl90zqFgZ/saQjiQL+JFxow0QIlszSS5NBt8v+pk4gQJt3MlpfRN85rDVZGtlISwaMJAsoaifq",
	"0n25wpbfNlLcb5LQQvxzQh1iwkiVzurndL9/rD5AVdoyLpLQxU1FV/Y27jmJti6cBJzU1QO7sd9t7uEL",
	"1wZl53BW3OoqKzXYwxfBdiZrsC8SkyUYj+QZ6rZnm9whJZqLZQJlvWlbcKLC1qoqVlM8Mp9+wIfVlpvx",
	"+/FsvKcuunS9rzGHwrhYa9BYBIbxxIX8HMipxtlJz7v15OZr1edl7XNCZHaAKgj1grgFU6uGjCmWggHV",
	"NuFGJBf8cw6ERyhUMQdlR2idIY5LMdPVDNw1R6OdvT38z2f5g0eLc1I9ig827+c2kVv970ib8x1V4oYn",
	"ETz6cCnOkbbBi3rceb1A2soiGe/pGh5bbBhF8zTqfpQkM7vmnxi69mZwxsgdlRq9d5qr03MHRnF4Anu6",
	"qJ35inOdO7E97I3YtmGJ2L9RQVV3hG39vH5kAL6a4zZWcSgUE7li7NBAxWleLWqwWtZWb4OPxsBsG4EF",
	"10e1aXKDWUc9R79Y3btEt0uSc35UkE7dAB9qqRB5ktTrLJVPRTSLNbHzoVFhh5rrh0D8uiPuWPEdKjqc",
	"XscJzna31zrF9lL7PZP8DVXFXejPkhb/u5AWG3Bt3B/Rl/LQ0HYM+I9m/EdK9n2+0IabHGfJeRnfbrd/",
	"BwAA//+juRrRRxYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
