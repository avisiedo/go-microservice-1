// Code generated by mockery v2.38.0. DO NOT EDIT.

package echo

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// Event is an autogenerated mock type for the Event type
type Event struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: ctx
func (_m *Event) CreateEvent(ctx echo.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEvent provides a mock function with given fields: ctx, eventsId
func (_m *Event) DeleteEvent(ctx echo.Context, eventsId string) error {
	ret := _m.Called(ctx, eventsId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) error); ok {
		r0 = rf(ctx, eventsId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEvent provides a mock function with given fields: ctx, eventsId
func (_m *Event) GetEvent(ctx echo.Context, eventsId string) error {
	ret := _m.Called(ctx, eventsId)

	if len(ret) == 0 {
		panic("no return value specified for GetEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) error); ok {
		r0 = rf(ctx, eventsId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListEvents provides a mock function with given fields: ctx
func (_m *Event) ListEvents(ctx echo.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEvent provides a mock function with given fields: ctx, eventsId
func (_m *Event) UpdateEvent(ctx echo.Context, eventsId string) error {
	ret := _m.Called(ctx, eventsId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) error); ok {
		r0 = rf(ctx, eventsId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEvent creates a new instance of Event. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *Event {
	mock := &Event{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
