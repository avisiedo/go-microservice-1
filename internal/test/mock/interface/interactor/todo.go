// Code generated by mockery v2.38.0. DO NOT EDIT.

package interactor

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/avisiedo/go-microservice-1/internal/domain/model"

	uuid "github.com/google/uuid"
)

// Todo is an autogenerated mock type for the Todo type
type Todo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, todo
func (_m *Todo) Create(ctx context.Context, todo *model.Todo) (*model.Todo, error) {
	ret := _m.Called(ctx, todo)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Todo) (*model.Todo, error)); ok {
		return rf(ctx, todo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Todo) *model.Todo); ok {
		r0 = rf(ctx, todo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Todo) error); ok {
		r1 = rf(ctx, todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *Todo) GetAll(ctx context.Context) ([]model.Todo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []model.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Todo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Todo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUUID provides a mock function with given fields: ctx, _a1
func (_m *Todo) GetByUUID(ctx context.Context, _a1 uuid.UUID) (*model.Todo, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetByUUID")
	}

	var r0 *model.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Todo, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Todo); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: ctx, todo
func (_m *Todo) Patch(ctx context.Context, todo *model.Todo) (*model.Todo, error) {
	ret := _m.Called(ctx, todo)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *model.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Todo) (*model.Todo, error)); ok {
		return rf(ctx, todo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Todo) *model.Todo); ok {
		r0 = rf(ctx, todo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Todo) error); ok {
		r1 = rf(ctx, todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, todo
func (_m *Todo) Update(ctx context.Context, todo *model.Todo) (*model.Todo, error) {
	ret := _m.Called(ctx, todo)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Todo) (*model.Todo, error)); ok {
		return rf(ctx, todo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Todo) *model.Todo); ok {
		r0 = rf(ctx, todo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Todo) error); ok {
		r1 = rf(ctx, todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTodo creates a new instance of Todo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Todo {
	mock := &Todo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
